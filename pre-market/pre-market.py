from playwright.sync_api import sync_playwright
import requests
import time
import json
import random

# FastAPI endpoint for data to be sent
url = "http://127.0.0.1:8000/preopen"

def nse_preopen(retries=5):
    with sync_playwright() as p:
        browser = p.chromium.launch(
            headless=True,
            args=[
                '--disable-http2',
                '--disable-blink-features=AutomationControlled',
                '--no-sandbox',
                '--disable-web-security',
                '--disable-features=IsolateOrigins,site-per-process'
            ]
        )
        
        context = browser.new_context(
            viewport={"width": 1920, "height": 1080},
            user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36',
            locale='en-US',
            timezone_id='Asia/Kolkata',
            permissions=['geolocation']
        )
        
        page = context.new_page()
        page.set_extra_http_headers({
            'Accept-Language': 'en-GB,en;q=0.9',
            'Accept': '*/*',
            'Connection': 'keep-alive',
            'sec-ch-ua': '"Brave";v="135", "Not-A.Brand";v="8", "Chromium";v="135"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Linux"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-origin',
            'sec-gpc': '1'
        })
        
        try:
            print("Visiting NSE homepage...")
            page.goto("https://www.nseindia.com/", wait_until="domcontentloaded")
            
            page.mouse.move(random.randint(100, 800), random.randint(100, 600))
            time.sleep(random.uniform(5, 10))
            
            cookies = context.cookies()
            cookie_dict = {cookie['name']: cookie['value'] for cookie in cookies}
            print(f"Cookies obtained: {len(cookies)}")
            
            print("Visiting pre-open market page...")
            page.goto("https://www.nseindia.com/market-data/pre-open-market-cm-and-emerge-market", wait_until="domcontentloaded")
            time.sleep(random.uniform(5, 8))
            
            cookies = context.cookies()
            cookie_dict = {cookie['name']: cookie['value'] for cookie in cookies}
            cookie_header = '; '.join([f"{name}={value}" for name, value in cookie_dict.items()])
            
            print("Fetching pre-open market data...")
            # page.evaluate part generated by claude
            response = page.evaluate("""async () => {
                const response = await fetch('https://www.nseindia.com/api/market-data-pre-open?key=NIFTY', {
                    headers: {
                        'Referer': 'https://www.nseindia.com/market-data/pre-open-market-cm-and-emerge-market',
                        'Accept': '*/*',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`API request failed with status: ${response.status}`);
                }
                
                return await response.json();
            }""")
            
            if response:
                # Send data to FastAPI preopen route using HTTP post
                api_response = requests.post(url, json=response)
                print(f"API response status code: {api_response.status_code}")
                
                nifty50 = json.dumps(response, indent=2)
                print(f"Data successfully retrieved, sample: {nifty50[:200]}...")
                
                return response
            
        except Exception as e:
            print(f"An error occurred: {e}")
            page.screenshot(path=f"error_screenshot_{int(time.time())}.png")
            return None
        
        finally:
            page.close()
            context.close()
            browser.close()

if __name__ == "__main__":
    for retry in range(5):
        print(f"Attempt {retry+1}/5")
        result = nse_preopen()
        if result:
            print("Success!")
            break
        else:
            print(f"Retrying in {10 + retry*5} seconds...")
            time.sleep(10 + retry*5)